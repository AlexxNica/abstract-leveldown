// Generated by CoffeeScript 1.8.0
(function() {
  var AbstractError, AbstractIterator, AlreadyEndError, Errors, InvalidArgumentError, NotImplementedError, inherits, util;

  util = require("abstract-object/lib/util");

  inherits = util.inherits;

  Errors = require("./abstract-error");

  AbstractError = Errors.AbstractError;

  NotImplementedError = Errors.NotImplementedError;

  InvalidArgumentError = Errors.InvalidArgumentError;

  AlreadyEndError = Errors.AlreadyEndError;

  module.exports = AbstractIterator = (function() {
    AbstractIterator.AlreadyEndError = AlreadyEndError;

    function AbstractIterator(db) {
      this.db = db;
      this._ended = false;
      this._nexting = false;
    }

    AbstractIterator.prototype._next = function(callback) {
      var self;
      self = this;
      if (this._nextSync) {
        return setImmediate(function() {
          var e, result;
          try {
            result = self._nextSync();
            self._nexting = false;
            if (result) {
              return callback(null, result[0], result[1]);
            } else {
              return callback();
            }
          } catch (_error) {
            e = _error;
            self._nexting = false;
            return callback(e);
          }
        });
      } else {
        return setImmediate(function() {
          self._nexting = false;
          return callback();
        });
      }
    };

    AbstractIterator.prototype._end = function(callback) {
      var self;
      self = this;
      if (this._endSync) {
        return setImmediate(function() {
          var e, result;
          try {
            result = self._endSync();
            return callback(null, result);
          } catch (_error) {
            e = _error;
            return callback(e);
          }
        });
      } else {
        return setImmediate(function() {
          return callback();
        });
      }
    };

    AbstractIterator.prototype.nextSync = function() {
      var result;
      if (this._nextSync) {
        this._nexting = true;
        result = this._nextSync();
        this._nexting = false;
        return result;
      }
      throw new NotImplementedError();
    };

    AbstractIterator.prototype.endSync = function() {
      if (this._endSync) {
        return this._endSync();
      }
      throw new NotImplementedError();
    };

    AbstractIterator.prototype.next = function(callback) {
      var self;
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("next() requires a callback argument");
      }
      if (this._ended) {
        return callback(new AlreadyEndError("cannot call next() after end()"));
      }
      if (this._nexting) {
        return callback(new AlreadyEndError("cannot call next() before previous next() has completed"));
      }
      this._nexting = true;
      self = this;
      return this._next(function() {
        self._nexting = false;
        return callback.apply(null, arguments);
      });
    };

    AbstractIterator.prototype.end = function(callback) {
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("end() requires a callback argument");
      }
      if (this._ended) {
        return callback(new AlreadyEndError("end() already called on iterator"));
      }
      this._ended = true;
      return this._end(callback);
    };

    return AbstractIterator;

  })();

}).call(this);
